<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xs:include schemaLocation="TextTags.xsd"/>
	<xs:simpleType name="LanguageType">
		<xs:restriction>
			<xs:enumeration value="de_DE"/>
			<xs:enumeration value="en_US"/>
			<xs:enumeration value="es_ES"/>
			<xs:enumeration value="fr_FR"/>
			<xs:enumeration value="it_IT"/>
			<xs:enumeration value="ja_JP"/>
			<xs:enumeration value="ko_KR"/>
			<xs:enumeration value="pl_PL"/>
			<xs:enumeration value="ru_RU"/>
			<xs:enumeration value="zh_Hans_CN"/>
			<xs:enumeration value="zh_Hant_HK"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TextType">
		<xs:annotation>
			<xs:documentation>
				<html>
					<head>
						<style type="text/css">
							code {
							border: 1px solid #ddd;
							padding: 1px 4px;
							border-radius: 2px;
							background-color: #f9f9f9;
							font-family: monospace,Courier;
							}

							code.str {
								color:#a31515;
							}
						</style>
					</head>
					<body>
						A Text element contains one or more text form, separated by a pipe character (|). Each text form is a composite format string.

						<h1>Text Forms</h1>
<pre>&lt;Row Tag=&quot;LOC_MAN&quot;&gt;
	&lt;Text&gt;man |men |woman |women | people&lt;/Text&gt;
	&lt;Gender&gt;masculine |masculine |feminine |feminine | neuter&lt;/Gender&gt;
	&lt;Plurality&gt;1 |2 |1 |2 | 20&lt;/Plurality&gt;
&lt;/Row&gt;</pre>

						<p>This example defines that man is single masculine, men is plural masculine, woman is single feminine, women is plural feminine, etc.</p>

						<h2>Reference a text form</h2>
						<p>To reference a particular plurality, use stars/asterisks (*). <code>Locale.Lookup('There are 3 {LOC_MAN*2} on the bus.')</code> returns <code class="str">There are 3 men on the bus.</code>
							because the first form of plurality 2 is men.
							<code>Locale.Lookup('There are 3 {LOC_MAN*20} on the bus.')</code> returns <code>There are 3 people on the bus.</code>.
						</p>

						<p>To reference a particular gender, use ...</p>

						<h1>Composite Format String</h1>
						<p>A composite format string consists of fixed text, text placeholders, control sequences, and icon placeholders.</p>

						<p>In
							<code class="str">"Give a <span style="color:blue">[COLOR_blue]{LOC_BUILDING_FACTORY_NAME}[ENDCOLOR]</span>"
							</code>
							,
							<code class="str">"Give a "</code>
							is fixed text; <code class="str">"[COLOR_blue]"</code> and <code class="str">"[ENDCOLOR]"</code> is control sequence; <code class="str">"{LOC_BUILDING_FACTORY_NAME}"</code> is text placeholder.
						</p>

						<h1>Text Placeholders (Curly brackets)</h1>
						Text placeholders are enclosed by curly brackets({}). There are two types of text placeholders, indexed format item and text reference item.

						<p>Each text placeholder is called parameter in Localization.log. If Localization.log says "Failed to evaluate parameter 1.", it means the first curly bracket has something wrong.</p>

						<h2>Indexed Format Item</h2>
						<p>An indexed Format Item is enclosed by curly brackets and starts with a positive integer.</p>

						<p>If the text of tag LOC_EXAMPLE_1 is "{1} attacks {2}",
							LUA code <code>Locale.Lookup("LOC_EXAMPLE_1", "Alice", "Bob")</code> returns <code class="str">"Alice attacks Bob"</code>. Specifically, <code class="str">"Alice"</code> replaces <code>{1}</code>; <code class="str">"Bob"</code> replaces <code>{2}</code>.
							Note, indexed format items start with 1.
						</p>

						<p>Comments can be appended to indexed Format Items with an underscore (_).
							<code class="str">"{1_nameA} attacks {2_maneB}"</code> functions exactly the same as the previous example, except that nameA and maneB are, as comment, appended to the indexed format items. Comments can be arbitrary.
						</p>

						<h2>Transforms</h2>
						<h3>:lower</h3>
						<p>Transform the text to lower case.</p>
						<p>See also <a href="http://modiki.civfanatics.com/index.php?title=Localization_Tutorial_(Civ5)">Localization Tutorial (Civ5)</a></p>
						<h2>Linguistic Variations</h2>
						<p>An indexed format item may take a format condition. Take <code>Locale.Lookup("{1:plural 1?man;other?men;}", 1)</code> as an example.</p>


						<p>
						<code>:plural</code> is a predicate, which evaluate <code>{1}</code> to either <code>1</code> or <code>2</code>. <code>..?man;other?men;</code> is a conditional block.
							If <code>..</code> evaluates to <code>1</code>, then output <code class="str">"man"</code>; otherwise output <code class="str">"men"</code>.
						Therefore, <code>Locale.Lookup("{1:plural 1?man;other?men;}", 1)</code> returns <code class="str">"man"</code>.</p>

						<p>Similarly, <code>Locale.Lookup("{1:plural 1?man;other?men;}", 2)</code> returns <code class="str">"men"</code>; <code>Locale.Lookup("{1:plural 2?man;other?men;}", 1)</code> returns <code class="str">"men"</code>;
						<code>Locale.Lookup("{1:plural 3?man;other?men;}", 2)</code> returns <code class="str">"men"</code>, as <code>:plural</code> never evaluates to <code>3</code>.</p>

						<code>:plural</code> may not work in certain languages, including zh_Hans_CN.

						Other possible predicates are <code>:gender</code>.


						<h1>Control Sequences</h1>
						Control Sequences are:
						[COLOR_blue],
						[ENDCOLOR],
						[NEWLINE]

						<h1>Icon Placeholders</h1>
						Available icons are defined in Base/Assets/UI/Icons/FontIcons.xml, eg. [ICON_GOLD].
					</body>
				</html>
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="GameData">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="LocalizedText">
					<xs:annotation>
						<xs:documentation>Note, changes to LocalizedText do not appear in DebugLocalization.sqlite, which only contains the base game text.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice maxOccurs="unbounded">
							<xs:element name="Row">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Text" type="TextType">
										</xs:element>
									</xs:sequence>
									<xs:attribute name="Tag" type="xs:string"/>
									<xs:attribute name="Language" type="LanguageType"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="Replace">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Text" type="TextType"/>
										<xs:element name="Plurality" type="xs:string" minOccurs="0" />
									</xs:sequence>
									<xs:attribute name="Tag" type="TagType" use="required"/>
									<xs:attribute name="Language" type="LanguageType" use="required"/>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

</xs:schema>
